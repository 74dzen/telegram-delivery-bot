import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import requests
import json

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7377796192:AAEuQOJ3KedwCz_C2WwrR7QMU-PHD74jFQI"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –°–î–≠–ö
def get_cdek_token():
    url = "https://api.cdek.ru/v2/oauth/token"
    data = {
        "grant_type": "client_credentials",
        "client_id": "8sADkKf1pgUQtUdSYNFJZulRpLYjOBRK",
        "client_secret": "EfPTHHB8uPkhY4HBdprA709zNUpF0BcJ"
    }
    response = requests.post(url, data=data)
    if response.status_code == 200:
        return response.json().get("access_token")
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
def get_city_code(city_name, token):
    url = "https://api.cdek.ru/v2/location/cities"
    headers = {"Authorization": f"Bearer {token}"}
    params = {"country_codes": "RU", "city": city_name}
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200 and response.json():
        return response.json()[0].get("code")
    return None

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [["–°–î–≠–ö", "DPD"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    context.user_data.clear()
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
async def choose_service(update: Update, context: CallbackContext) -> None:
    text = update.message.text.strip()
    if text in ["–°–î–≠–ö", "DPD"]:
        context.user_data['service'] = text
        context.user_data['awaiting_data'] = True
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –ü—Ä–∏—à–ª–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n"
            f"–≤–µ—Å(–∫–≥) –≥–æ—Ä–æ–¥_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥_–ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω–∞(—Å–º) —à–∏—Ä–∏–Ω–∞(—Å–º) –≤—ã—Å–æ—Ç–∞(—Å–º)"
        )
        return
    await update.message.reply_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–Ω–æ–≤–∞.")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
async def process_delivery(update: Update, context: CallbackContext) -> None:
    if not context.user_data.get('awaiting_data'):
        return
    
    data = update.message.text.split()
    if len(data) != 6:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return
    
    try:
        weight = float(data[0])
        length = int(float(data[3]))
        width = int(float(data[4]))
        height = int(float(data[5]))
        loc_from = data[1]
        loc_to = data[2]
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ—Å –∏ –≥–∞–±–∞—Ä–∏—Ç—ã —É–∫–∞–∑–∞–Ω—ã —á–∏—Å–ª–æ–º.")
        return
    
    service = context.user_data['service']
    context.user_data['awaiting_data'] = False
    
    if service == "–°–î–≠–ö":
        token = get_cdek_token()
        if not token:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –°–î–≠–ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        from_code = get_city_code(loc_from, token)
        to_code = get_city_code(loc_to, token)
        
        if not from_code or not to_code:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –≥–æ—Ä–æ–¥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
            return
        
        headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
        url = "https://api.cdek.ru/v2/calculator/tarifflist"
        payload = {
            "from_location": {"code": from_code},
            "to_location": {"code": to_code},
            "packages": [{
                "weight": weight,
                "length": length,
                "width": width,
                "height": height
            }]
        }
    else:
        return
    
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 200:
        tariffs = response.json().get("tariff_codes", [])
        best_tariffs = {}
        
        for tariff in tariffs:
            mode = tariff.get("delivery_mode")
            price = tariff.get("delivery_sum")
            if mode in [1, 2, 3, 4]:
                if mode not in best_tariffs or price < best_tariffs[mode]["delivery_sum"]:
                    best_tariffs[mode] = tariff
        
        result = "\n".join([
            f"üì¶ {tariff['tariff_name']} - {tariff['delivery_sum']}‚ÇΩ ({tariff['period_min']}-{tariff['period_max']} –¥–Ω.)"
            for tariff in best_tariffs.values()
        ])
        
        await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ {service}:\n{result}")
    else:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex("^(–°–î–≠–ö|DPD)$"), choose_service))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^(–°–î–≠–ö|DPD)$"), process_delivery))
    app.run_polling()

if __name__ == "__main__":
    main()
