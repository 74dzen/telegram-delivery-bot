import requests
import json
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import certifi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

TOKEN = "7377796192:AAEuQOJ3KedwCz_C2WwrR7QMU-PHD74jFQI"
CDEK_API_URL = "https://api.cdek.ru/v2/calculator/tarifflist"
CDEK_AUTH_URL = "https://api.cdek.ru/v2/oauth/token"
CDEK_CITY_URL = "https://api.cdek.ru/v2/location/cities"
CDEK_ACCOUNT = "8sADkKf1pgUQtUdSYNFJZulRpLYjOBRK"
CDEK_PASSWORD = "EfPTHHB8uPkhY4HBdprA709zNUpF0BcJ"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def get_cdek_token():
    try:
        response = requests.post(
            CDEK_AUTH_URL,
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            data={
                "grant_type": "client_credentials",
                "client_id": CDEK_ACCOUNT.strip(),
                "client_secret": CDEK_PASSWORD.strip()
            },
            verify=certifi.where()
        )
        data = response.json()
        logging.info(f"–û—Ç–≤–µ—Ç –°–î–≠–ö –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {data}")
        return data.get("access_token")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –°–î–≠–ö: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
def get_city_code(city_name: str, token: str) -> int:
    headers = {"Authorization": f"Bearer {token}"}
    params = {"city": city_name}
    response = requests.get(
        CDEK_CITY_URL, 
        headers=headers, 
        params=params,
        verify=certifi.where()
    )
    if response.status_code == 200:
        cities = response.json()
        if cities:
            return cities[0]["code"]
    return None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≤–µ—Å(–∫–≥) –≥–æ—Ä–æ–¥_–æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ–¥_–ø–æ–ª—É—á–µ–Ω–∏—è –î—Ö–®—Ö–í(—Å–º)")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞
async def calculate_shipping(update: Update, context: CallbackContext) -> None:
    try:
        text = update.message.text.split()
        weight = float(text[0])
        from_city = text[1]
        to_city = text[2]
        # –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫—É—é "x" –Ω–∞ —Ä—É—Å—Å–∫—É—é "—Ö"
        dimensions = text[3].replace('x', '—Ö').split('—Ö')
        length, width, height = map(int, dimensions)

        token = get_cdek_token()
        if not token:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –°–î–≠–ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        from_city_code = get_city_code(from_city, token)
        to_city_code = get_city_code(to_city, token)

        if not from_city_code or not to_city_code:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∏–∑ –≥–æ—Ä–æ–¥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.")
            return

        headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
        payload = {
            "from_location": {"code": from_city_code},
            "to_location": {"code": to_city_code},
            "packages": [{
                "weight": weight * 1000,
                "length": length,
                "width": width,
                "height": height
            }]
        }

        response = requests.post(
            CDEK_API_URL, 
            headers=headers, 
            json=payload,
            verify=certifi.where()
        )
        logging.info(f"–û—Ç–≤–µ—Ç –°–î–≠–ö –Ω–∞ —Ä–∞—Å—á–µ—Ç —Ç–∞—Ä–∏—Ñ–∞: {response.status_code} - {response.text}")

        if response.status_code == 200:
            data = response.json()
            logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç –°–î–≠–ö (–¥–∞–Ω–Ω—ã–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö): {json.dumps(data, indent=2)}")

            if "tariff_codes" in data and data["tariff_codes"]:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
                min_door_to_door = None
                min_warehouse_to_door = None
                min_door_to_warehouse = None
                min_warehouse_to_warehouse = None
                
                # –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                for tariff in data["tariff_codes"]:
                    tariff_name = tariff.get("tariff_name", "")
                    price = tariff.get("delivery_sum", float('inf'))
                    delivery_min = tariff.get("period_min", "?")
                    delivery_max = tariff.get("period_max", "?")
                    delivery_term = f"{delivery_min}-{delivery_max} –¥–Ω–µ–π" if delivery_min != "?" and delivery_max != "?" else "–°—Ä–æ–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

                    # –í—ã–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    if "–¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å" in tariff_name.lower() and (min_door_to_door is None or price < min_door_to_door['price']):
                        min_door_to_door = {"tariff_name": tariff_name, "price": price, "delivery_term": delivery_term}
                    elif "—Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å" in tariff_name.lower() and (min_warehouse_to_door is None or price < min_warehouse_to_door['price']):
                        min_warehouse_to_door = {"tariff_name": tariff_name, "price": price, "delivery_term": delivery_term}
                    elif "–¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥" in tariff_name.lower() and (min_door_to_warehouse is None or price < min_door_to_warehouse['price']):
                        min_door_to_warehouse = {"tariff_name": tariff_name, "price": price, "delivery_term": delivery_term}
                    elif "—Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥" in tariff_name.lower() and (min_warehouse_to_warehouse is None or price < min_warehouse_to_warehouse['price']):
                        min_warehouse_to_warehouse = {"tariff_name": tariff_name, "price": price, "delivery_term": delivery_term}

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏
                message = ""
                if min_door_to_door:
                    message += f"üì¶ –¢–∞—Ä–∏—Ñ (–¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å): {min_door_to_door['tariff_name']}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {min_door_to_door['price']} —Ä—É–±.\n‚è≥ –°—Ä–æ–∫: {min_door_to_door['delivery_term']}\n\n"
                if min_warehouse_to_door:
                    message += f"üì¶ –¢–∞—Ä–∏—Ñ (—Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å): {min_warehouse_to_door['tariff_name']}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {min_warehouse_to_door['price']} —Ä—É–±.\n‚è≥ –°—Ä–æ–∫: {min_warehouse_to_door['delivery_term']}\n\n"
                if min_door_to_warehouse:
                    message += f"üì¶ –¢–∞—Ä–∏—Ñ (–¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥): {min_door_to_warehouse['tariff_name']}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {min_door_to_warehouse['price']} —Ä—É–±.\n‚è≥ –°—Ä–æ–∫: {min_door_to_warehouse['delivery_term']}\n\n"
                if min_warehouse_to_warehouse:
                    message += f"üì¶ –¢–∞—Ä–∏—Ñ (—Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥): {min_warehouse_to_warehouse['tariff_name']}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {min_warehouse_to_warehouse['price']} —Ä—É–±.\n‚è≥ –°—Ä–æ–∫: {min_warehouse_to_warehouse['delivery_term']}\n\n"

                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not message:
                    message = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞—Ä–∏—Ñ—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."

                await update.message.reply_text(message)
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.")
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –°–î–≠–ö: {response.status_code} - {response.text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_shipping))
    application.run_polling()

if __name__ == "__main__":
    main()
